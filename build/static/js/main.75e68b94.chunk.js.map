{"version":3,"sources":["components/useLocalStorage.js","Context/ThemeContext.js","components/Nav.js","components/Todos.js","components/CompletedTodos.js","components/Productivity.js","components/Footer.js","UI/AppTheme.js","components/ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["useLocalStorage","key","value","localStorage","window","JSON","stringify","useState","parse","getItem","local","setLocal","useEffect","setItem","setValues","ThemeContext","createContext","ThemeContextProvider","props","LightTheme","setTheme","Provider","changeTheme","Nav","useContext","className","to","size","color","onClick","fill","Todos","todos","deleteTodo","addCompleteTodo","pauseTodos","unpauseTodos","updateTodo","length","map","todo","id","status","type","name","onChange","e","style","textAlign","padding","CompleteTodos","completedTodos","deleteCompleteTodo","redoCompletedTodo","propType","PropTypes","array","Productivity","setTodo","setTodos","setCompleteTodo","completeProgress","setCompleteProgress","pausedProgress","setPausedProgress","UpdateProgressBar","totalItems","pausedItemsLength","filter","completedTodosLength","pausedPercentage","filteredTodo","todoItem","filteredList","onSubmit","preventDefault","newTodo","uuidv4","newTodos","formSubmitted","placeholder","input","target","required","ProgressBar","now","variant","item","find","newCompleteTodo","selectedTodo","filterTodos","NewTodos","editedTodos","push","seletedTodo","Footer","date","Date","getFullYear","AppTheme","React","Component","darkMode","textColor","background","lightMode","App","theme","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.75e68b94.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst useLocalStorage = (key, value) => {\n    const localStorage = window.localStorage;\n    value = JSON.stringify(value)\n\n    const [local, setLocal] = useState(() => {\n        const existingLocal = JSON.parse(localStorage.getItem(key) || value);\n        return existingLocal;\n    });\n\n    function setValues(key, local) {\n        return localStorage.setItem(key, JSON.stringify(local));\n    }\n\n    useEffect(() => {\n        setValues(key, local);\n    }, [local]);\n\n    return [local, setLocal];\n};\n\nexport default useLocalStorage;\n","import React, { createContext, useState } from 'react';\nimport App from '../App';\nimport useLocalStorage from '../components/useLocalStorage';\n\n\nexport const ThemeContext = createContext();\n\nconst ThemeContextProvider = (props) => {\n    const [LightTheme, setTheme] = useLocalStorage('LightTheme', true)\n\n    const changeTheme = () => {\n        setTheme(!LightTheme);\n    };\n\n    return (\n        <ThemeContext.Provider value={{ LightTheme, changeTheme }}>\n            <App />\n        </ThemeContext.Provider>\n    );\n};\n\nexport default ThemeContextProvider;\n","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { MdLightbulbOutline } from 'react-icons/md';\nimport { FiMoon } from 'react-icons/fi';\nimport { ThemeContext } from '../Context/ThemeContext';\nimport { FaFileSignature } from 'react-icons/fa';\n\nfunction Nav() {\n    const {LightTheme, changeTheme} = useContext(ThemeContext);\n    return (\n        <div className=\"Nav\">\n            <nav>\n                <ul>\n                    <Link to=\"/\" className=\"nav-title\">\n                        Productivity\n                    </Link>\n                    <Link to=\"/about\">About</Link>\n                    {LightTheme === false ? (\n                        <MdLightbulbOutline\n                            size=\"25\"\n                            color=\"orange\"\n                            onClick={() => changeTheme()}\n                        />\n                    ) : (\n                        <FiMoon\n                            size=\"25\"\n                            color=\"black\"\n                            fill=\"black\"\n                            onClick={() => changeTheme()}\n                        />\n                    )}\n                    <a></a>\n                </ul>\n            </nav>\n        </div>\n    );\n}\n\nexport default Nav;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FaPlay, FaPauseCircle } from 'react-icons/fa';\nimport { MdDelete, MdReplay, MdDoneAll } from 'react-icons/md';\n\nfunction Todos(props) {\n    const {\n        todos,\n        deleteTodo,\n        addCompleteTodo,\n        pauseTodos,\n        unpauseTodos,\n        updateTodo\n    } = props;\n    \n    return (\n        <div className=\"Todos\">\n            {todos.length >= 1 ? (\n                <ul className=\"todosList\">\n                    {todos.map((todo) => {\n                        return (\n                            <div\n                                key={todo.id}\n                                className={`todoItem ${todo.status}`}\n                            >\n                                <input type=\"text\" value={todo.name} onChange={(e)=>updateTodo(e, todo.id)}/>\n                                {/* <li>{todo.name}</li> */}\n                                <span className=\"control-icons\">\n                                    <MdDoneAll\n                                        onClick={() => addCompleteTodo(todo.id)}\n                                        className={todo.status === 'paused' ? \"hide complete-icon\" :\"complete-icon\"}\n                                        color=\"#4bb543\"\n                                        size=\"25\"\n                                    />\n                                    {todo.status === 'paused' ? (\n                                        <FaPlay\n                                            onClick={() =>\n                                                unpauseTodos(todo.id)\n                                            }\n                                            className=\"replay-icon\"\n                                            size=\"20\"\n                                        />\n                                    ) : (\n                                        <FaPauseCircle\n                                            onClick={() => pauseTodos(todo.id)}\n                                            className=\"pause-icon\"\n                                            color=\"#F99245\"\n                                            size=\"25\"\n                                        />\n                                    )}\n                                    <MdDelete\n                                        onClick={() => deleteTodo(todo.id)}\n                                        className=\"delete-icon\"\n                                        color=\"#BD1919\"\n                                        size=\"25\"\n                                    />\n                                </span>\n                            </div>\n                        );\n                    })}\n                </ul>\n            ) : (\n                <h5\n                    style={{\n                        color: '#eb5e28',\n                        textAlign: 'center',\n                        padding: '2%',\n                    }}\n                >\n                    No active todos...\n                </h5>\n            )}\n        </div>\n    );\n}\n\nTodos.propTypes = {\n    todos: PropTypes.array.isRequired,\n    deleteTodo: PropTypes.func.isRequired,\n    addCompleteTodo: PropTypes.func.isRequired,\n};\n\nexport default Todos;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FaPlay, FaPauseCircle } from 'react-icons/fa';\nimport { MdDelete, MdReplay, MdDoneAll } from 'react-icons/md';\n\nfunction CompleteTodos(props) {\n    const { completedTodos, deleteCompleteTodo, redoCompletedTodo } = props;\n\n    // const displayTodos = () => {\n    //     completedTodos.map((todo) => {\n    //         const { id, name, status } = todo;\n    //         return (\n    //             <div key={id} className={`todoItem ${status}`}>\n    //                 <li>{name} This is where the name should be</li>\n    //                 <span className=\"control-icons\">\n    //                     <img\n    //                         src={require('../images/pause.svg')}\n    //                         alt=\"pause\"\n    //                         width=\"25\"\n    //                         height=\"25\"\n    //                     />\n    //                     <img\n    //                         src={require('../images/remove.svg')}\n    //                         alt=\"remove\"\n    //                         width=\"25\"\n    //                         height=\"25\"\n    //                         onClick={() => deleteTodo(id)}\n    //                     />\n    //                 </span>\n    //             </div>\n    //         );\n    //     });\n    // };\n\n    return (\n        <div className=\"CompleteTodos\">\n            <ul className=\"completedList\">\n                {completedTodos.map((todo) => {\n                    const { id, name, status } = todo;\n                    return (\n                        <div key={id} className={`todoItem ${status}`}>\n                            <li>{name}</li>\n                            <span className=\"control-icons\">\n                                <MdReplay\n                                    onClick={()=>redoCompletedTodo(id)}\n                                    className=\"redo-icon\"\n                                    color=\"#FFFFFF\"\n                                    size=\"25\"\n                                />\n                                <MdDelete\n                                    onClick={() => deleteCompleteTodo(id)}\n                                    className=\"delete-icon\"\n                                    color=\"#BD1919\"\n                                    size=\"25\"\n                                />\n                            </span>\n                        </div>\n                    );\n                })}\n            </ul>\n        </div>\n    );\n}\n\nCompleteTodos.propType = {\n    CompleteTodos: PropTypes.array,\n};\n\nexport default CompleteTodos;\n","import React, { useState, useEffect, useContext } from 'react';\nimport Todos from './Todos';\nimport { v4 as uuidv4 } from 'uuid';\nimport CompleteTodos from './CompletedTodos';\nimport UseLocalStorage from './useLocalStorage';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport useLocalStorage from './useLocalStorage';\n\nfunction Productivity() {\n    const [todo, setTodo] = useState('');\n    const [todos, setTodos] = useLocalStorage('todos', []);\n    const [completedTodos, setCompleteTodo] = useLocalStorage('completedTodos', [])\n    const [completeProgress, setCompleteProgress] = useState(0);\n    const [pausedProgress, setPausedProgress] = useState(0);\n\n    useEffect(()=>{\n        UpdateProgressBar()\n    },[])\n\n    useEffect(() => {\n        UpdateProgressBar();\n    }, [todos, completedTodos]);\n\n    const updateInput = (input) => {\n        setTodo(input);\n    };\n\n    const formSubmitted = (e) => {\n        e.preventDefault();\n        let id = uuidv4();\n        let newTodo = {\n            id,\n            name: todo,\n            // TODO:  find a better way to represent todo status\n            status: 'new',\n        };\n        const newTodos = [...todos, newTodo];\n        setTodo('');\n        setTodos(newTodos);\n    };\n\n    function UpdateProgressBar() {\n        // total items to be used to calculate percentage below\n        const totalItems = todos.length + completedTodos.length;\n\n        const pausedItemsArr = todos.filter((todo) => todo.status === 'paused');\n\n        const pausedItemsLength = pausedItemsArr.length;\n        const completedTodosLength = completedTodos.length;\n\n        const pausedPercentage = (100 * pausedItemsLength) / totalItems;\n        const completedPercentage = (100 * completedTodosLength) / totalItems;\n        setCompleteProgress(completedPercentage);\n        setPausedProgress(pausedPercentage);\n    }\n\n    function deleteTodo(id) {\n        const NewTodo = [...todos];\n        const filteredTodo = NewTodo.filter((todoItem) => {\n            return todoItem.id !== id;\n        });\n        setTodos(filteredTodo);\n    }\n\n    function addCompleteTodo(id) {\n        // 1. move item to the completed array: completedTodos\n        const item = todos.find((todoItem) => todoItem.id === id);\n        item.status = 'complete';\n        const newCompleteTodo = [...completedTodos, item];\n        setCompleteTodo(newCompleteTodo);\n\n        // 2. delete it from the current todo list: todos\n        deleteTodo(id);\n    }\n\n    function deleteCompleteTodo(id) {\n        const completeTodosCopy = [...completedTodos];\n        const filteredList = completeTodosCopy.filter((todo) => todo.id !== id);\n        setCompleteTodo(filteredList);\n    }\n\n    function redoCompletedTodo(id) {\n        // find the selected todo in the completed todo list and move it to the active todo section\n        const seletedTodo = completedTodos.find((todo) => todo.id === id);\n        seletedTodo.status = 'new';\n        setTodos([...todos, seletedTodo]);\n\n        // remove from the completed todo list\n        deleteCompleteTodo(id);\n    }\n\n    function pauseTodos(id) {\n        const selectedTodo = todos.find((todo) => todo.id == id);\n        selectedTodo.status = 'paused';\n        const filterTodos = todos.filter((todo) => todo.id !== id);\n        setTodos([...filterTodos, selectedTodo]);\n    }\n\n    function unpauseTodos(id) {\n        const selectedTodo = todos.find((todo) => todo.id == id);\n        selectedTodo.status = 'new';\n        const filterTodos = todos.filter((todo) => todo.id !== id);\n        setTodos([...filterTodos, selectedTodo]);\n    }\n\n    function updateTodo(e, id) {\n        // 1. create shallow copy of the array\n        const NewTodos = [...todos];\n\n        // 2 Find item in list and it's index position and edit it\n        const editedTodos = [];\n        NewTodos.map((todo) => {\n            if (todo.id === id) {\n                todo.name = e.target.value;\n            }\n            return editedTodos.push(todo);\n        });\n        // 3. reset the todos\n        setTodos(editedTodos);\n    }\n    return (\n        <div className=\"Productivity\">\n            <form onSubmit={(e) => formSubmitted(e)}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Add Item...\"\n                    value={todo}\n                    onChange={(e) => updateInput(e.target.value)}\n                    required\n                    className=\"form-control\"\n                />\n                <button className=\"btn\">Enter</button>\n            </form>\n\n            <ProgressBar\n                now={100}\n                className={\n                    completedTodos.length === 0 && todos.length === 0\n                        ? 'progressBar hide'\n                        : 'progressBar'\n                }\n            >\n                <ProgressBar variant=\"warning\" now={pausedProgress} key={2} />\n                <ProgressBar variant=\"success\" now={completeProgress} key={1} />\n            </ProgressBar>\n\n            <Todos\n                todos={todos}\n                deleteTodo={deleteTodo}\n                addCompleteTodo={addCompleteTodo}\n                pauseTodos={pauseTodos}\n                unpauseTodos={unpauseTodos}\n                updateTodo={updateTodo}\n            />\n            <CompleteTodos\n                completedTodos={completedTodos}\n                deleteCompleteTodo={deleteCompleteTodo}\n                redoCompletedTodo={redoCompletedTodo}\n            />\n        </div>\n    );\n}\n\nexport default Productivity;\n","import React from 'react';\n\nfunction Footer() {\n    const date = new Date()\n    return (\n        <div className=\"Footer\">\n            <p>Productivity Inc</p>\n            <sub>{date.getFullYear()}</sub>\n        </div>\n    );\n}\n\nexport default Footer;\n","const primary100 = '#eb5e28';\nconst primary200 = '#252422';\nconst primary300 = '#403d39';\nconst primary400 = '#ccc5b9';\nconst primary500 = '#fffcf2';\nconst success = '#4bb543';\nconst warning = '#f99245';\nconst error = '#bd1919';\nconst wheat = '#F5DEB3';\n\nconst AppTheme = {\n    darkMode: {\n        textColor: primary500,\n        background: primary200,\n    },\n    lightMode: {\n        textColor: primary500,\n        background: wheat,\n    },\n};\n\nexport default AppTheme;\n","import React, {Fragment} from 'react';\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false,\n            error: '',\n        };\n    }\n\n    static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n    }\n\n    componentDidCatch(error, errorInfo) {\n        // You can also log the error to an error reporting service\n        console.error(\"this is the error\",error);\n        this.setState(error)\n    }\n\n    render() {\n        // TODO: error not actually displaying when needed\n        if (this.state.hasError) {\n            // You can render any custom fallback UI\n            return (\n            <Fragment>\n            <h1 class=\"errorMessage\">Something went wrong.</h1>;\n            <code>{this.state.error}</code>\n            </Fragment>\n            )\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;\n","import React, {useContext } from 'react';\nimport Nav from './components/Nav';\nimport Productivity from './components/Productivity';\nimport Footer from './components/Footer';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport { ThemeContext } from './Context/ThemeContext';\nimport AppTheme from './UI/AppTheme';\n\nfunction App() {\n    const { LightTheme } = useContext(ThemeContext);\n    let theme = AppTheme.lightMode\n\n    if (LightTheme){\n        theme = AppTheme.lightMode\n    }\n    else{\n        theme = AppTheme.darkMode\n    }\n\n    return (\n        <div\n            className=\"App\"\n            style={{ background: theme.background, color: theme.textColor }}\n        >\n            {/* <ErrorBoundary> */}\n            <Nav />\n            <Productivity />\n            <Footer />\n            {/* </ErrorBoundary> */}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport ThemeContextProvider from './Context/ThemeContext';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <ThemeContextProvider/>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}